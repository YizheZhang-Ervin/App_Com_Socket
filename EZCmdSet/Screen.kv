
<MainScreen>:
    GridLayout:
        cols:1
        row_force_default:False
        row_default_height:40

        BoxLayout:
            size_hint:-10,0

            Button:
                text:"Linux Manual"
                size_hint: None,None
                size:150,30
                on_press:root.manager.current="Linux"

            Button:
                text:"Sql Manual"
                size_hint: None, None
                size: 150, 30
                on_press:root.manager.current="Sql"

            Button:
                text:"HTML/CSS Manual"
                size_hint: None, None
                size: 150, 30
                on_press:root.manager.current="Html"

        ScrollView:
            do_scroll_x: False
            do_scroll_y: True
            bar_width:10

            Label:
                size_hint_y: None
                text_size: root.width, None
                size: self.texture_size
                height: self.texture_size[1]
                padding: 10, 10
                text:
                    'please click on the button above to view commands !'

<LinuxScreen>:
    GridLayout:
        cols:1
        row_force_default:False
        row_default_height:40

        BoxLayout:
            size_hint:-10,0

            Button:
                text:"Linux Manual"
                size_hint: None,None
                size:150,30
                on_press:root.manager.current="Linux"

            Button:
                text:"Sql Manual"
                size_hint: None, None
                size: 150, 30
                on_press:root.manager.current="Sql"

            Button:
                text:"HTML/CSS Manual"
                size_hint: None, None
                size: 150, 30
                on_press:root.manager.current="Html"

        ScrollView:
            do_scroll_x: False
            do_scroll_y: True
            bar_width:10

            Label:
                font_name:'Droid Sans Fallback'
                size_hint_y: None
                text_size: root.width, None
                size: self.texture_size
                height: self.texture_size[1]
                padding: 10, 10
                text:
                    '''系统信息
                    arch 显示机器的处理器架构
                    uname -m 显示机器的处理器架构
                    uname -r 显示正在使用的内核版本
                    dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)
                    hdparm -i /dev/hda 罗列一个磁盘的架构特性
                    hdparm -tT /dev/sda 在磁盘上执行测试性读取操作
                    cat /proc/cpuinfo 显示CPU info的信息
                    cat /proc/interrupts 显示中断
                    cat /proc/meminfo 校验内存使用
                    cat /proc/swaps 显示哪些swap被使用
                    cat /proc/version 显示内核的版本
                    cat /proc/net/dev 显示网络适配器及统计
                    cat /proc/mounts 显示已加载的文件系统
                    lspci -tv 罗列 PCI 设备
                    lsusb -tv 显示 USB 设备
                    date 显示系统日期
                    cal 2007 显示2007年的日历表
                    date 041217002007.00 设置日期和时间 - 月日时分年.秒
                    clock -w 将时间修改保存到 BIOS



                    关机 (系统的关机、重启以及登出 )
                    shutdown -h now 关闭系统
                    init 0 关闭系统
                    telinit 0 关闭系统
                    shutdown -h hours:minutes & 按预定时间关闭系统
                    shutdown -c 取消按预定时间关闭系统
                    shutdown -r now 重启
                    reboot 重启
                    logout 注销



                    文件和目录
                    cd /home 进入 '/ home' 目录'
                    cd .. 返回上一级目录
                    cd ../.. 返回上两级目录
                    cd 进入个人的主目录
                    cd ~user1 进入个人的主目录
                    cd - 返回上次所在的目录
                    pwd 显示工作路径
                    ls 查看目录中的文件
                    ls -F 查看目录中的文件
                    ls -l 显示文件和目录的详细资料
                    ls -a 显示隐藏文件
                    ls *[0-9]* 显示包含数字的文件名和目录名
                    tree 显示文件和目录由根目录开始的树形结构
                    lstree 显示文件和目录由根目录开始的树形结构
                    mkdir dir1 创建一个叫做 'dir1' 的目录'
                    mkdir dir1 dir2 同时创建两个目录
                    mkdir -p /tmp/dir1/dir2 创建一个目录树
                    rm -f file1 删除一个叫做 'file1' 的文件'
                    rmdir dir1 删除一个叫做 'dir1' 的目录'
                    rm -rf dir1 删除一个叫做 'dir1' 的目录并同时删除其内容
                    rm -rf dir1 dir2 同时删除两个目录及它们的内容
                    mv dir1 new_dir 重命名/移动 一个目录
                    cp file1 file2 复制一个文件
                    cp dir/* . 复制一个目录下的所有文件到当前工作目录
                    cp -a /tmp/dir1 . 复制一个目录到当前工作目录
                    cp -a dir1 dir2 复制一个目录
                    ln -s file1 lnk1 创建一个指向文件或目录的软链接
                    ln file1 lnk1 创建一个指向文件或目录的物理链接
                    touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)
                    file file1 outputs the mime type of the file as text
                    iconv -l 列出已知的编码
                    iconv -f fromEncoding -t toEncoding inputFile > outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.
                    find . -maxdepth 1 -name *.jpg -print -exec convert "{}" -resize 80x60 "thumbs/{}" \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)



                    文件搜索
                    find / -name file1 从 '/' 开始进入根文件系统搜索文件和目录
                    find / -user user1 搜索属于用户 'user1' 的文件和目录
                    find /home/user1 -name \*.bin 在目录 '/ home/user1' 中搜索带有'.bin' 结尾的文件
                    find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件
                    find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件
                    find / -name \*.rpm -exec chmod 755 '{}' \; 搜索以 '.rpm' 结尾的文件并定义其权限
                    find / -xdev -name \*.rpm 搜索以 '.rpm' 结尾的文件，忽略光驱、捷盘等可移动设备
                    locate \*.ps 寻找以 '.ps' 结尾的文件 - 先运行 'updatedb' 命令
                    whereis halt 显示一个二进制文件、源码或man的位置
                    which halt 显示一个二进制文件或可执行文件的完整路径



                    挂载一个文件系统
                    mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 '/ mnt/hda2' 已经存在
                    umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 '/ mnt/hda2' 退出
                    fuser -km /mnt/hda2 当设备繁忙时强制卸载
                    umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用
                    mount /dev/fd0 /mnt/floppy 挂载一个软盘
                    mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom
                    mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom
                    mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom
                    mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件
                    mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统
                    mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备
                    mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享



                    磁盘空间
                    df -h 显示已经挂载的分区列表
                    ls -lSr |more 以尺寸大小排列文件和目录
                    du -sh dir1 估算目录 'dir1' 已经使用的磁盘空间'
                    du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小
                    rpm -q -a --qf '%10{SIZE}t%{NAME}n' | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)
                    dpkg-query -W -f='${Installed-Size;10}t${Package}n' | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)



                    用户和群组
                    groupadd group_name 创建一个新用户组
                    groupdel group_name 删除一个用户组
                    groupmod -n new_group_name old_group_name 重命名一个用户组
                    useradd -c "Name Surname " -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 "admin" 用户组的用户
                    useradd user1 创建一个新用户
                    userdel -r user1 删除一个用户 ( '-r' 排除主目录)
                    usermod -c "User FTP" -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性
                    passwd 修改口令
                    passwd user1 修改一个用户的口令 (只允许root执行)
                    chage -E 2005-12-31 user1 设置用户口令的失效期限
                    pwck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的用户
                    grpck 检查 '/etc/passwd' 的文件格式和语法修正以及存在的群组
                    newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组



                    文件的权限 - 使用 "+" 设置权限，使用 "-" 用于取消
                    ls -lh 显示权限
                    ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示
                    chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限
                    chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限
                    chown user1 file1 改变一个文件的所有人属性
                    chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性
                    chgrp group1 file1 改变文件的群组
                    chown user1:group1 file1 改变一个文件的所有人和群组属性
                    find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件
                    chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限
                    chmod u-s /bin/file1 禁用一个二进制文件的 SUID位
                    chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的
                    chmod g-s /home/public 禁用一个目录的 SGID 位
                    chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件
                    chmod o-t /home/public 禁用一个目录的 STIKY 位



                    文件的特殊属性 - 使用 "+" 设置权限，使用 "-" 用于取消
                    chattr +a file1 只允许以追加方式读写文件
                    chattr +c file1 允许这个文件能被内核自动压缩/解压
                    chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件
                    chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接
                    chattr +s file1 允许一个文件被安全地删除
                    chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘
                    chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件
                    lsattr 显示特殊的属性



                    打包和压缩文件
                    bunzip2 file1.bz2 解压一个叫做 'file1.bz2'的文件
                    bzip2 file1 压缩一个叫做 'file1' 的文件
                    gunzip file1.gz 解压一个叫做 'file1.gz'的文件
                    gzip file1 压缩一个叫做 'file1'的文件
                    gzip -9 file1 最大程度压缩
                    rar a file1.rar test_file 创建一个叫做 'file1.rar' 的包
                    rar a file1.rar file1 file2 dir1 同时压缩 'file1', 'file2' 以及目录 'dir1'
                    unrar x file1.rar 解压rar包
                    tar -cvf archive.tar file1 创建一个非压缩的 tarball
                    tar -cvf archive.tar file1 file2 dir1 创建一个包含了 'file1', 'file2' 以及 'dir1'的档案文件
                    tar -tf archive.tar 显示一个包中的内容
                    tar -xvf archive.tar 释放一个包
                    tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下
                    tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包
                    tar -jxvf archive.tar.bz2 解压一个bzip2格式的压缩包
                    tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包
                    tar -zxvf archive.tar.gz 解压一个gzip格式的压缩包
                    zip file1.zip file1 创建一个zip格式的压缩包
                    zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包
                    unzip file1.zip 解压一个zip格式压缩包



                    RPM 包 - （Fedora, Redhat及类似系统）
                    rpm -ivh package.rpm 安装一个rpm包
                    rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告
                    rpm -U package.rpm 更新一个rpm包但不改变其配置文件
                    rpm -F package.rpm 更新一个确定已经安装的rpm包
                    rpm -e package_name.rpm 删除一个rpm包
                    rpm -qa 显示系统中所有已经安装的rpm包
                    rpm -qa | grep httpd 显示所有名称中包含 "httpd" 字样的rpm包
                    rpm -qi package_name 获取一个已安装包的特殊信息
                    rpm -qg "System Environment/Daemons" 显示一个组件的rpm包
                    rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表
                    rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表
                    rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表
                    rpm -q package_name --whatprovides 显示一个rpm包所占的体积
                    rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l
                    rpm -q package_name --changelog 显示一个rpm包的修改历史
                    rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供
                    rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表
                    rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书
                    rpm --checksig package.rpm 确认一个rpm包的完整性
                    rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性
                    rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间
                    rpm -Va 检查系统中所有已安装的rpm包- 小心使用
                    rpm -Vp package.rpm 确认一个rpm包还未安装
                    rpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件
                    rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包
                    rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包



                    YUM 软件包升级器 - （Fedora, RedHat及类似系统）
                    yum install package_name 下载并安装一个rpm包
                    yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系
                    yum update package_name.rpm 更新当前系统中所有安装的rpm包
                    yum update package_name 更新一个rpm包
                    yum remove package_name 删除一个rpm包
                    yum list 列出当前系统中安装的所有包
                    yum search package_name 在rpm仓库中搜寻软件包
                    yum clean packages 清理rpm缓存删除下载的包
                    yum clean headers 删除所有头文件
                    yum clean all 删除所有缓存的包和头文件



                    DEB 包 (Debian, Ubuntu 以及类似系统)
                    dpkg -i package.deb 安装/更新一个 deb 包
                    dpkg -r package_name 从系统删除一个 deb 包
                    dpkg -l 显示系统中所有已经安装的 deb 包
                    dpkg -l | grep httpd 显示所有名称中包含 "httpd" 字样的deb包
                    dpkg -s package_name 获得已经安装在系统中一个特殊包的信息
                    dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表
                    dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表
                    dpkg -S /bin/ping 确认所给的文件由哪个deb包提供



                    APT 软件工具 (Debian, Ubuntu 以及类似系统)
                    apt-get install package_name 安装/更新一个 deb 包
                    apt-cdrom install package_name 从光盘安装/更新一个 deb 包
                    apt-get update 升级列表中的软件包
                    apt-get upgrade 升级所有已安装的软件
                    apt-get remove package_name 从系统删除一个deb包
                    apt-get check 确认依赖的软件仓库正确
                    apt-get clean 从下载的软件包中清理缓存
                    apt-cache search searched-package 返回包含所要搜索字符串的软件包名称



                    查看文件内容
                    cat file1 从第一个字节开始正向查看文件的内容
                    tac file1 从最后一行开始反向查看一个文件的内容
                    more file1 查看一个长文件的内容
                    less file1 类似于 'more' 命令，但是它允许在文件中和正向操作一样的反向操作
                    head -2 file1 查看一个文件的前两行
                    tail -2 file1 查看一个文件的最后两行
                    tail -f /var/log/messages 实时查看被添加到一个文件中的内容



                    文本处理
                    cat file1 file2 ... | command <> file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT
                    cat file1 | command( sed, grep, awk, grep, etc...) > result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中
                    cat file1 | command( sed, grep, awk, grep, etc...) >> result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中
                    grep Aug /var/log/messages 在文件 '/var/log/messages'中查找关键词"Aug"
                    grep ^Aug /var/log/messages 在文件 '/var/log/messages'中查找以"Aug"开始的词汇
                    grep [0-9] /var/log/messages 选择 '/var/log/messages' 文件中所有包含数字的行
                    grep Aug -R /var/log/* 在目录 '/var/log' 及随后的目录中搜索字符串"Aug"
                    sed 's/stringa1/stringa2/g' example.txt 将example.txt文件中的 "string1" 替换成 "string2"
                    sed '/^$/d' example.txt 从example.txt文件中删除所有空白行
                    sed '/ *#/d; /^$/d' example.txt 从example.txt文件中删除所有注释和空白行
                    echo 'esempio' | tr '[:lower:]' '[:upper:]' 合并上下单元格内容
                    sed -e '1d' result.txt 从文件example.txt 中排除第一行
                    sed -n '/stringa1/p' 查看只包含词汇 "string1"的行
                    sed -e 's/ *$//' example.txt 删除每一行最后的空白字符
                    sed -e 's/stringa1//g' example.txt 从文档中只删除词汇 "string1" 并保留剩余全部
                    sed -n '1,5p;5q' example.txt 查看从第一行到第5行内容
                    sed -n '5p;5q' example.txt 查看第5行
                    sed -e 's/00*/0/g' example.txt 用单个零替换多个零
                    cat -n file1 标示文件的行数
                    cat example.txt | awk 'NR%2==1' 删除example.txt文件中的所有偶数行
                    echo a b c | awk '{print $1}' 查看一行第一栏
                    echo a b c | awk '{print $1,$3}' 查看一行的第一和第三栏
                    paste file1 file2 合并两个文件或两栏的内容
                    paste -d '+' file1 file2 合并两个文件或两栏的内容，中间用"+"区分
                    sort file1 file2 排序两个文件的内容
                    sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)
                    sort file1 file2 | uniq -u 删除交集，留下其他的行
                    sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)
                    comm -1 file1 file2 比较两个文件的内容只删除 'file1' 所包含的内容
                    comm -2 file1 file2 比较两个文件的内容只删除 'file2' 所包含的内容
                    comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分




                    字符设置和文件格式转换
                    dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX
                    unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS
                    recode ..HTML < page.txt > page.html 将一个文本文件转换成html
                    recode -l | more 显示所有允许的转换格式



                    文件系统分析
                    badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块
                    fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性
                    fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性
                    e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性
                    e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性
                    fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性
                    fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性
                    fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性
                    dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性



                    初始化一个文件系统
                    mkfs /dev/hda1 在hda1分区创建一个文件系统
                    mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统
                    mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统
                    mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统
                    fdformat -n /dev/fd0 格式化一个软盘
                    mkswap /dev/hda3 创建一个swap文件系统



                    SWAP文件系统
                    mkswap /dev/hda3 创建一个swap文件系统
                    swapon /dev/hda3 启用一个新的swap文件系统
                    swapon /dev/hda2 /dev/hdb3 启用两个swap分区



                    备份
                    dump -0aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的完整备份
                    dump -1aj -f /tmp/home0.bak /home 制作一个 '/home' 目录的交互式备份
                    restore -if /tmp/home0.bak 还原一个交互式备份
                    rsync -rogpav --delete /home /tmp 同步两边的目录
                    rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync
                    rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录
                    rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录
                    dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr 'dd of=hda.gz' 通过ssh在远程主机上执行一次备份本地磁盘的操作
                    dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件
                    tar -Puf backup.tar /home/user 执行一次对 '/home/user' 目录的交互式备份操作
                    ( cd /tmp/local/ && tar c . ) | ssh -C user@ip_addr 'cd /home/share/ && tar x -p' 通过ssh在远程目录中复制一个目录内容
                    ( tar c /home ) | ssh -C user@ip_addr 'cd /home/backup-home && tar x -p' 通过ssh在远程目录中复制一个本地目录
                    tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接
                    find /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 '.txt' 结尾的文件到另一个目录
                    find /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2 查找所有以 '.log' 结尾的文件并做成一个bzip包
                    dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作
                    dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容



                    光盘
                    cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容
                    mkisofs /dev/cdrom > cd.iso 在磁盘上创建一个光盘的iso镜像文件
                    mkisofs /dev/cdrom | gzip > cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件
                    mkisofs -J -allow-leading-dots -R -V "Label CD" -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件
                    cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件
                    gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件
                    mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件
                    cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中
                    cd-paranoia -- "-3" 从一个CD光盘转录音轨到 wav 文件中（参数-3）
                    cdrecord --scanbus 扫描总线以识别scsi通道
                    dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD



                    网络 - （以太网和WIFI无线）
                    ifconfig eth0 显示一个以太网卡的配置
                    ifup eth0 启用一个 'eth0' 网络设备
                    ifdown eth0 禁用一个 'eth0' 网络设备
                    ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址
                    ifconfig eth0 promisc 设置 'eth0' 成混杂模式以嗅探数据包 (sniffing)
                    dhclient eth0 以dhcp模式启用 'eth0'
                    route -n show routing table
                    route add -net 0/0 gw IP_Gateway configura default gateway
                    route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network '192.168.0.0/16'
                    route del 0/0 gw IP_gateway remove static route
                    echo "1" > /proc/sys/net/ipv4/ip_forward activate ip routing
                    hostname show hostname of system
                    host www.example.com lookup hostname to resolve name to ip address and viceversa
                    nslookup www.example.com lookup hostname to resolve name to ip address and viceversa
                    ip link show show link status of all interfaces
                    mii-tool eth0 show link status of 'eth0'
                    ethtool eth0 show statistics of network card 'eth0'
                    netstat -tup show all active network connections and their PID
                    netstat -tupl show all network services listening on the system and their PID
                    tcpdump tcp port 80 show all HTTP traffic
                    iwlist scan show wireless networks
                    iwconfig eth1 show configuration of a wireless network card
                    hostname show hostname
                    host www.example.com lookup hostname to resolve name to ip address and viceversa
                    nslookup www.example.com lookup hostname to resolve name to ip address and viceversa
                    whois www.example.com lookup on Whois database

                    '''

<SqlScreen>:
    GridLayout:
        cols:1
        row_force_default:False
        row_default_height:40

        BoxLayout:
            size_hint:-10,0

            Button:
                text:"Linux Manual"
                size_hint: None,None
                size:150,30
                on_press:root.manager.current="Linux"

            Button:
                text:"Sql Manual"
                size_hint: None, None
                size: 150, 30
                on_press:root.manager.current="Sql"

            Button:
                text:"HTML/CSS Manual"
                size_hint: None, None
                size: 150, 30
                on_press:root.manager.current="Html"

        ScrollView:
            do_scroll_x: False
            do_scroll_y: True
            bar_width:10

            Label:
                font_name:'Droid Sans Fallback'
                size_hint_y: None
                text_size: root.width, None
                size: self.texture_size
                height: self.texture_size[1]
                padding: 10, 10
                text:
                    '''
                    一、基础

                    1、说明：创建数据库
                    CREATE DATABASE database-name
                    2、说明：删除数据库
                    drop database dbname
                    3、说明：备份sql server
                    --- 创建 备份数据的 device
                    USE master
                    EXEC sp_addumpdevice 'disk', 'testBack', 'c:\mssql7backup\MyNwind_1.dat'
                    --- 开始 备份
                    BACKUP DATABASE pubs TO testBack
                    4、说明：创建新表
                    create table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)

                    根据已有的表创建新表：
                    A：create table tab_new like tab_old (使用旧表创建新表)
                    B：create table tab_new as select col1,col2… from tab_old definition only
                    5、说明：删除新表
                    drop table tabname
                    6、说明：增加一个列
                    Alter table tabname add column col type
                    注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。
                    7、说明：添加主键： Alter table tabname add primary key(col)
                    说明：删除主键： Alter table tabname drop primary key(col)
                    8、说明：创建索引：create [unique] index idxname on tabname(col….)
                    删除索引：drop index idxname
                    注：索引是不可更改的，想更改必须删除重新建。
                    9、说明：创建视图：create view viewname as select statement
                    删除视图：drop view viewname
                    10、说明：几个简单的基本的sql语句
                    选择：select * from table1 where 范围
                    插入：insert into table1(field1,field2) values(value1,value2)
                    删除：delete from table1 where 范围
                    更新：update table1 set field1=value1 where 范围
                    查找：select * from table1 where field1 like ’%value1%’ ---like的语法很精妙，查资料!
                    排序：select * from table1 order by field1,field2 [desc]
                    总数：select count as totalcount from table1
                    求和：select sum(field1) as sumvalue from table1
                    平均：select avg(field1) as avgvalue from table1
                    最大：select max(field1) as maxvalue from table1
                    最小：select min(field1) as minvalue from table1
                    11、说明：几个高级查询运算词
                    A： UNION 运算符
                    UNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION 一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。
                    B： EXCEPT 运算符
                    EXCEPT运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。
                    C： INTERSECT 运算符
                    INTERSECT运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。
                    注：使用运算词的几个查询结果行必须是一致的。
                    12、说明：使用外连接
                    A、left （outer） join：
                    左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。
                    SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c
                    B：right （outer） join:
                    右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。
                    C：full/cross （outer） join：
                    全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。
                    12、分组:Group by:
                    一张表，一旦分组 完成后，查询后只能得到组相关的信息。
                    组相关的信息：（统计信息） count,sum,max,min,avg  分组的标准)
                    在SQLServer中分组时：不能以text,ntext,image类型的字段作为分组依据
                    在selecte统计函数中的字段，不能和普通的字段放在一起；

                    13、对数据库进行操作：
                    分离数据库： sp_detach_db;附加数据库：sp_attach_db 后接表明，附加需要完整的路径名
                    14.如何修改数据库的名称:
                    sp_renamedb 'old_name', 'new_name'

                    二、提升

                    1、说明：复制表(只复制结构,源表名：a 新表名：b) (Access可用)
                    法一：select * into b from a where 1<>1（仅用于SQlServer）
                    法二：select top 0 * into b from a
                    2、说明：拷贝表(拷贝数据,源表名：a 目标表名：b) (Access可用)
                    insert into b(a, b, c) select d,e,f from b;

                    3、说明：跨数据库之间表的拷贝(具体数据使用绝对路径) (Access可用)
                    insert into b(a, b, c) select d,e,f from b in ‘具体数据库’ where 条件
                    例子：..from b in '"&Server.MapPath(".")&"\data.mdb" &"' where..

                    4、说明：子查询(表名1：a 表名2：b)
                    select a,b,c from a where a IN (select d from b ) 或者: select a,b,c from a where a IN (1,2,3)

                    5、说明：显示文章、提交人和最后回复时间
                    select a.title,a.username,b.adddate from table a,(select max(adddate) adddate from table where table.title=a.title) b

                    6、说明：外连接查询(表名1：a 表名2：b)
                    select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c

                    7、说明：在线视图查询(表名1：a )
                    select * from (SELECT a,b,c FROM a) T where t.a > 1;

                    8、说明：between的用法,between限制查询数据范围时包括了边界值,not between不包括
                    select * from table1 where time between time1 and time2
                    select a,b,c, from table1 where a not between 数值1 and 数值2

                    9、说明：in 的使用方法
                    select * from table1 where a [not] in (‘值1’,’值2’,’值4’,’值6’)

                    10、说明：两张关联表，删除主表中已经在副表中没有的信息
                    delete from table1 where not exists ( select * from table2 where table1.field1=table2.field1 )

                    11、说明：四表联查问题：
                    select * from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where .....

                    12、说明：日程安排提前五分钟提醒
                    SQL: select * from 日程安排 where datediff('minute',f开始时间,getdate())>5

                    13、说明：一条sql 语句搞定数据库分页
                    select top 10 b.* from (select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段 order by a.排序字段
                    具体实现：
                    关于数据库分页：

                    declare @start int,@end int

                    @sql  nvarchar(600)

                    set @sql=’select top’+str(@end-@start+1)+’+from T where rid not in(select top’+str(@str-1)+’Rid from T where Rid>-1)’

                    exec sp_executesql @sql


                    注意：在top后不能直接跟一个变量，所以在实际应用中只有这样的进行特殊的处理。Rid为一个标识列，如果top后还有具体的字段，这样做是非常有好处的。因为这样可以避免 top的字段如果是逻辑索引的，查询的结果后实际表中的不一致（逻辑索引中的数据有可能和数据表中的不一致，而查询时如果处在索引则首先查询索引）

                    14、说明：前10条记录
                    select top 10 * form table1 where 范围

                    15、说明：选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)
                    select a,b,c from tablename ta where a=(select max(a) from tablename tb where tb.b=ta.b)

                    16、说明：包括所有在 TableA中但不在 TableB和TableC中的行并消除所有重复行而派生出一个结果表
                    (select a from tableA ) except (select a from tableB) except (select a from tableC)

                    17、说明：随机取出10条数据
                    select top 10 * from tablename order by newid()

                    18、说明：随机选择记录
                    select newid()

                    19、说明：删除重复记录
                    1),delete from tablename where id not in (select max(id) from tablename group by col1,col2,...)
                    2),select distinct * into temp from tablename
                    delete from tablename
                    insert into tablename select * from temp
                    评价： 这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作
                    3),例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段

                    alter table tablename
                    --添加一个自增列
                    add  column_b int identity(1,1)
                    delete from tablename where column_b not in(
                    select max(column_b)  from tablename group by column1,column2,...)
                    alter table tablename drop column column_b

                    20、说明：列出数据库里所有的表名
                    select name from sysobjects where type='U' // U代表用户

                    21、说明：列出表里的所有的列名
                    select name from syscolumns where id=object_id('TableName')

                    22、说明：列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select 中的case。
                    select type,sum(case vender when 'A' then pcs else 0 end),sum(case vender when 'C' then pcs else 0 end),sum(case vender when 'B' then pcs else 0 end) FROM tablename group by type
                    显示结果：
                    type vender pcs
                    电脑 A 1
                    电脑 A 1
                    光盘 B 2
                    光盘 A 2
                    手机 B 3
                    手机 C 3

                    23、说明：初始化表table1

                    TRUNCATE TABLE table1

                    24、说明：选择从10到15的记录
                    select top 5 * from (select top 15 * from table order by id asc) table_别名 order by id desc

                    三、技巧

                    1、1=1，1=2的使用，在SQL语句组合时用的较多

                    “where 1=1” 是表示选择全部    “where 1=2”全部不选，
                    如：
                    if @strWhere !=''
                    begin
                    set @strSQL = 'select count(*) as Total from [' + @tblName + '] where ' + @strWhere
                    end
                    else
                    begin
                    set @strSQL = 'select count(*) as Total from [' + @tblName + ']'
                    end

                    我们可以直接写成

                    错误！未找到目录项。
                    set @strSQL = 'select count(*) as Total from [' + @tblName + '] where 1=1 安定 '+ @strWhere 2、收缩数据库
                    --重建索引
                    DBCC REINDEX
                    DBCC INDEXDEFRAG
                    --收缩数据和日志
                    DBCC SHRINKDB
                    DBCC SHRINKFILE

                    3、压缩数据库
                    dbcc shrinkdatabase(dbname)

                    4、转移数据库给新用户以已存在用户权限
                    exec sp_change_users_login 'update_one','newname','oldname'
                    go

                    5、检查备份集
                    RESTORE VERIFYONLY from disk='E:\dvbbs.bak'

                    6、修复数据库
                    ALTER DATABASE [dvbbs] SET SINGLE_USER
                    GO
                    DBCC CHECKDB('dvbbs',repair_allow_data_loss) WITH TABLOCK
                    GO
                    ALTER DATABASE [dvbbs] SET MULTI_USER
                    GO

                    7、日志清除
                    SET NOCOUNT ON
                    DECLARE @LogicalFileName sysname,
                    @MaxMinutes INT,
                    @NewSize INT

                    USE tablename -- 要操作的数据库名
                    SELECT  @LogicalFileName = 'tablename_log', -- 日志文件名
                    @MaxMinutes = 10, -- Limit on time allowed to wrap log.
                    @NewSize = 1  -- 你想设定的日志文件的大小(M)

                    Setup / initialize
                    DECLARE @OriginalSize int
                    SELECT @OriginalSize = size
                    FROM sysfiles
                    WHERE name = @LogicalFileName
                    SELECT 'Original Size of ' + db_name() + ' LOG is ' +
                    CONVERT(VARCHAR(30),@OriginalSize) + ' 8K pages or ' +
                    CONVERT(VARCHAR(30),(@OriginalSize*8/1024)) + 'MB'
                    FROM sysfiles
                    WHERE name = @LogicalFileName
                    CREATE TABLE DummyTrans
                    (DummyColumn char (8000) not null)


                    DECLARE @Counter    INT,
                    @StartTime DATETIME,
                    @TruncLog   VARCHAR(255)
                    SELECT @StartTime = GETDATE(),
                    @TruncLog = 'BACKUP LOG ' + db_name() + ' WITH TRUNCATE_ONLY'

                    DBCC SHRINKFILE (@LogicalFileName, @NewSize)
                    EXEC (@TruncLog)
                    -- Wrap the log if necessary.
                    WHILE @MaxMinutes > DATEDIFF (mi, @StartTime, GETDATE()) -- time has not expired
                    AND @OriginalSize = (SELECT size FROM sysfiles WHERE name = @LogicalFileName)
                    AND (@OriginalSize * 8 /1024) > @NewSize
                    BEGIN -- Outer loop.
                    SELECT @Counter = 0
                    WHILE   ((@Counter < @OriginalSize / 16) AND (@Counter < 50000))
                    BEGIN -- update
                    INSERT DummyTrans VALUES ('Fill Log') DELETE DummyTrans
                    SELECT @Counter = @Counter + 1
                    END
                    EXEC (@TruncLog)
                    END
                    SELECT 'Final Size of ' + db_name() + ' LOG is ' +
                    CONVERT(VARCHAR(30),size) + ' 8K pages or ' +
                    CONVERT(VARCHAR(30),(size*8/1024)) + 'MB'
                    FROM sysfiles
                    WHERE name = @LogicalFileName
                    DROP TABLE DummyTrans
                    SET NOCOUNT OFF

                    8、说明：更改某个表
                    exec sp_changeobjectowner 'tablename','dbo'

                    9、存储更改全部表

                    CREATE PROCEDURE dbo.User_ChangeObjectOwnerBatch
                    @OldOwner as NVARCHAR(128),
                    @NewOwner as NVARCHAR(128)
                    AS

                    DECLARE @Name    as NVARCHAR(128)
                    DECLARE @Owner   as NVARCHAR(128)
                    DECLARE @OwnerName   as NVARCHAR(128)

                    DECLARE curObject CURSOR FOR
                    select 'Name'    = name,
                    'Owner'    = user_name(uid)
                    from sysobjects
                    where user_name(uid)=@OldOwner
                    order by name

                    OPEN   curObject
                    FETCH NEXT FROM curObject INTO @Name, @Owner
                    WHILE(@@FETCH_STATUS=0)
                    BEGIN
                    if @Owner=@OldOwner
                    begin
                    set @OwnerName = @OldOwner + '.' + rtrim(@Name)
                    exec sp_changeobjectowner @OwnerName, @NewOwner
                    end
                    -- select @name,@NewOwner,@OldOwner

                    FETCH NEXT FROM curObject INTO @Name, @Owner
                    END

                    close curObject
                    deallocate curObject
                    GO


                    10、SQL SERVER中直接循环写入数据
                    declare @i int
                    set @i=1
                    while @i<30
                    begin
                    insert into test (userid) values(@i)
                    set @i=@i+1
                    end
                    案例：
                    有如下表，要求就裱中所有沒有及格的成績，在每次增長0.1的基礎上，使他們剛好及格:

                    Name     score
                    Zhangshan   80
                    Lishi       59
                    Wangwu      50
                    Songquan    69

                    while((select min(score) from tb_table)<60)

                    begin

                    update tb_table set score =score*1.01

                    where score<60

                    if  (select min(score) from tb_table)>60
                    break
                    else
                    continue
                    end

                    数据开发-经典

                    1.按姓氏笔画排序:
                    Select * From TableName Order By CustomerName Collate Chinese_PRC_Stroke_ci_as //从少到多

                    2.数据库加密:
                    select encrypt('原始密码')
                    select pwdencrypt('原始密码')
                    select pwdcompare('原始密码','加密后密码') = 1--相同；否则不相同 encrypt('原始密码')
                    select pwdencrypt('原始密码')
                    select pwdcompare('原始密码','加密后密码') = 1--相同；否则不相同

                    3.取回表中字段:
                    declare @list varchar(1000),
                    @sql nvarchar(1000)
                    select @list=@list+','+b.name from sysobjects a,syscolumns b where a.id=b.id and a.name='表A'
                    set @sql='select '+right(@list,len(@list)-1)+' from 表A'
                    exec (@sql)

                    4.查看硬盘分区:
                    EXEC master..xp_fixeddrives

                    5.比较A,B表是否相等:
                    if (select checksum_agg(binary_checksum(*)) from A)
                    =
                    (select checksum_agg(binary_checksum(*)) from B)
                    print '相等'
                    else
                    print '不相等'

                    6.杀掉所有的事件探察器进程:
                    DECLARE hcforeach CURSOR GLOBAL FOR SELECT 'kill '+RTRIM(spid) FROM master.dbo.sysprocesses
                    WHERE program_name IN('SQL profiler',N'SQL 事件探查器')
                    EXEC sp_msforeach_worker '?'

                    7.记录搜索:
                    开头到N条记录
                    Select Top N * From 表
                    -------------------------------
                    N到M条记录(要有主索引ID)
                    Select Top M-N * From 表 Where ID in (Select Top M ID From 表) Order by ID   Desc
                    ----------------------------------
                    N到结尾记录
                    Select Top N * From 表 Order by ID Desc
                    案例
                    例如1：一张表有一万多条记录，表的第一个字段 RecID 是自增长字段， 写一个SQL语句， 找出表的第31到第40个记录。

                    select top 10 recid from A where recid not  in(select top 30 recid from A)

                    分析：如果这样写会产生某些问题，如果recid在表中存在逻辑索引。

                    select top 10 recid from A where……是从索引中查找，而后面的select top 30 recid from A则在数据表中查找，这样由于索引中的顺序有可能和数据表中的不一致，这样就导致查询到的不是本来的欲得到的数据。

                    解决方案

                    1，用order by select top 30 recid from A order by ricid 如果该字段不是自增长，就会出现问题

                    2，在那个子查询中也加条件：select top 30 recid from A where recid>-1

                    例2：查询表中的最后以条记录，并不知道这个表共有多少数据,以及表结构。
                    set @s = 'select top 1 * from T   where pid not in (select top ' + str(@count-1) + ' pid  from  T)'

                    print @s      exec  sp_executesql  @s

                    9：获取当前数据库中的所有用户表
                    select Name from sysobjects where xtype='u' and status>=0

                    10：获取某一个表的所有字段
                    select name from syscolumns where id=object_id('表名')

                    select name from syscolumns where id in (select id from sysobjects where type = 'u' and name = '表名')

                    两种方式的效果相同

                    11：查看与某一个表相关的视图、存储过程、函数
                    select a.* from sysobjects a, syscomments b where a.id = b.id and b.text like '%表名%'

                    12：查看当前数据库中所有存储过程
                    select name as 存储过程名称 from sysobjects where xtype='P'

                    13：查询用户创建的所有数据库
                    select * from master..sysdatabases D where sid not in(select sid from master..syslogins where name='sa')
                    或者
                    select dbid, name AS DB_NAME from master..sysdatabases where sid <> 0x01

                    14：查询某一个表的字段和数据类型
                    select column_name,data_type from information_schema.columns
                    where table_name = '表名'

                    15：不同服务器数据库之间的数据操作

                    --创建链接服务器

                    exec sp_addlinkedserver   'ITSV ', ' ', 'SQLOLEDB ', '远程服务器名或ip地址 '

                    exec sp_addlinkedsrvlogin  'ITSV ', 'false ',null, '用户名 ', '密码 '

                    --查询示例

                    select * from ITSV.数据库名.dbo.表名

                    --导入示例

                    select * into 表 from ITSV.数据库名.dbo.表名

                    --以后不再使用时删除链接服务器

                    exec sp_dropserver  'ITSV ', 'droplogins '



                    --连接远程/局域网数据(openrowset/openquery/opendatasource)

                    --1、openrowset

                    --查询示例

                    select * from openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)

                    --生成本地表

                    select * into 表 from openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)



                    --把本地表导入远程表

                    insert openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)

                    select *from 本地表

                    --更新本地表

                    update b

                    set b.列A=a.列A

                    from openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)as a inner join 本地表 b

                    on a.column1=b.column1

                    --openquery用法需要创建一个连接

                    --首先创建一个连接创建链接服务器

                    exec sp_addlinkedserver   'ITSV ', ' ', 'SQLOLEDB ', '远程服务器名或ip地址 '

                    --查询

                    select *

                    FROM openquery(ITSV,  'SELECT *  FROM 数据库.dbo.表名 ')

                    --把本地表导入远程表

                    insert openquery(ITSV,  'SELECT *  FROM 数据库.dbo.表名 ')

                    select * from 本地表

                    --更新本地表

                    update b

                    set b.列B=a.列B

                    FROM openquery(ITSV,  'SELECT * FROM 数据库.dbo.表名 ') as a

                    inner join 本地表 b on a.列A=b.列A



                    --3、opendatasource/openrowset

                    SELECT   *

                    FROM   opendatasource( 'SQLOLEDB ',  'Data Source=ip/ServerName;User ID=登陆名;Password=密码 ' ).test.dbo.roy_ta

                    --把本地表导入远程表

                    insert opendatasource( 'SQLOLEDB ',  'Data Source=ip/ServerName;User ID=登陆名;Password=密码 ').数据库.dbo.表名

                    select * from 本地表

                    SQL Server基本函数

                    SQL Server基本函数

                    1.字符串函数 长度与分析用

                    1,datalength(Char_expr) 返回字符串包含字符数,但不包含后面的空格
                    2,substring(expression,start,length) 取子串，字符串的下标是从“1”，start为起始位置，length为字符串长度，实际应用中以len(expression)取得其长度
                    3,right(char_expr,int_expr) 返回字符串右边第int_expr个字符，还用left于之相反
                    4,isnull( check_expression , replacement_value )如果check_expression為空，則返回replacement_value的值，不為空，就返回check_expression字符操作类

                    5,Sp_addtype自定義數據類型
                    例如：EXEC sp_addtype birthday, datetime, 'NULL'

                    6,set nocount {on|off}
                    使返回的结果中不包含有关受 Transact-SQL 语句影响的行数的信息。如果存储过程中包含的一些语句并不返回许多实际的数据，则该设置由于大量减少了网络流量，因此可显著提高性能。SET NOCOUNT 设置是在执行或运行时设置，而不是在分析时设置。SET NOCOUNT 为 ON时，不返回计数（表示受 Transact-SQL 语句影响的行数）。



                    SET NOCOUNT
                    为 OFF 时，返回计数
                    '''

<HtmlScreen>:
    GridLayout:
        cols:1
        row_force_default:False
        row_default_height:40

        BoxLayout:
            size_hint:-10,0

            Button:
                text:"Linux Manual"
                size_hint: None,None
                size:150,30
                on_press:root.manager.current="Linux"

            Button:
                text:"Sql Manual"
                size_hint: None, None
                size: 150, 30
                on_press:root.manager.current="Sql"

            Button:
                text:"HTML/CSS Manual"
                size_hint: None, None
                size: 150, 30
                on_press:root.manager.current="Html"

        ScrollView:
            do_scroll_x: False
            do_scroll_y: True
            bar_width:10

            Label:
                font_name:'Droid Sans Fallback'
                size_hint_y: None
                text_size: root.width, None
                size: self.texture_size
                height: self.texture_size[1]
                padding: 10, 10
                text:
                    '''
                    标签	描述
                    <!--...-->	定义注释。
                    <!DOCTYPE> 	定义文档类型。
                    <a>	定义锚。
                    <abbr>	定义缩写。
                    <acronym>	定义只取首字母的缩写。
                    <address>	定义文档作者或拥有者的联系信息。
                    <applet>	不赞成使用。定义嵌入的 applet。
                    <area>	定义图像映射内部的区域。
                    <article>	定义文章。
                    <aside>	定义页面内容之外的内容。
                    <audio>	定义声音内容。
                    <b>	定义粗体字。
                    <base>	定义页面中所有链接的默认地址或默认目标。
                    <basefont>	不赞成使用。定义页面中文本的默认字体、颜色或尺寸。
                    <bdi>	定义文本的文本方向，使其脱离其周围文本的方向设置。
                    <bdo>	定义文字方向。
                    <big>	定义大号文本。
                    <blockquote>	定义长的引用。
                    <body>	定义文档的主体。
                    <br>	定义简单的折行。
                    <button>	定义按钮 (push button)。
                    <canvas>	定义图形。
                    <caption>	定义表格标题。
                    <center>	不赞成使用。定义居中文本。
                    <cite>	定义引用(citation)。
                    <code>	定义计算机代码文本。
                    <col>	定义表格中一个或多个列的属性值。
                    <colgroup>	定义表格中供格式化的列组。
                    <command>	定义命令按钮。
                    <datalist>	定义下拉列表。
                    <dd>	定义定义列表中项目的描述。
                    <del>	定义被删除文本。
                    <details>	定义元素的细节。
                    <dir>	不赞成使用。定义目录列表。
                    <div>	定义文档中的节。
                    <dfn>	定义定义项目。
                    <dialog>	定义对话框或窗口。
                    <dl>	定义定义列表。
                    <dt>	定义定义列表中的项目。
                    <em>	定义强调文本。
                    <embed>	定义外部交互内容或插件。
                    <fieldset>	定义围绕表单中元素的边框。
                    <figcaption>	定义 figure 元素的标题。
                    <figure>	定义媒介内容的分组，以及它们的标题。
                    <font>	不赞成使用。定义文字的字体、尺寸和颜色。
                    <footer>	定义 section 或 page 的页脚。
                    <form>	定义供用户输入的 HTML 表单。
                    <frame>	定义框架集的窗口或框架。
                    <frameset>	定义框架集。
                    <h1> to <h6>	定义 HTML 标题。
                    <head>	定义关于文档的信息。
                    <header>	定义 section 或 page 的页眉。
                    <hr>	定义水平线。
                    <html>	定义 HTML 文档。
                    <i>	定义斜体字。
                    <iframe>	定义内联框架。
                    <img>	定义图像。
                    <input>	定义输入控件。
                    <ins>	定义被插入文本。
                    <isindex>	不赞成使用。定义与文档相关的可搜索索引。
                    <kbd>	定义键盘文本。
                    <keygen>	定义生成密钥。
                    <label>	定义 input 元素的标注。
                    <legend>	定义 fieldset 元素的标题。
                    <li>	定义列表的项目。
                    <link>	定义文档与外部资源的关系。
                    <map>	定义图像映射。
                    <mark>	定义有记号的文本。
                    <menu>	定义命令的列表或菜单。
                    <menuitem>	定义用户可以从弹出菜单调用的命令/菜单项目。
                    <meta>	定义关于 HTML 文档的元信息。
                    <meter>	定义预定义范围内的度量。
                    <nav>	定义导航链接。
                    <noframes>	定义针对不支持框架的用户的替代内容。
                    <noscript>	定义针对不支持客户端脚本的用户的替代内容。
                    <object>	定义内嵌对象。
                    <ol>	定义有序列表。
                    <optgroup>	定义选择列表中相关选项的组合。
                    <option>	定义选择列表中的选项。
                    <output>	定义输出的一些类型。
                    <p>	定义段落。
                    <param>	定义对象的参数。
                    <pre>	定义预格式文本。
                    <progress>	定义任何类型的任务的进度。
                    <q>	定义短的引用。
                    <rp>	定义若浏览器不支持 ruby 元素显示的内容。
                    <rt>	定义 ruby 注释的解释。
                    <ruby>	定义 ruby 注释。
                    <s>	不赞成使用。定义加删除线的文本。
                    <samp>	定义计算机代码样本。
                    <script>	定义客户端脚本。
                    <section>	定义 section。
                    <select>	定义选择列表（下拉列表）。
                    <small>	定义小号文本。
                    <source>	定义媒介源。
                    <span>	定义文档中的节。
                    <strike>	不赞成使用。定义加删除线文本。
                    <strong>	定义强调文本。
                    <style>	定义文档的样式信息。
                    <sub>	定义下标文本。
                    <summary>	为 <details> 元素定义可见的标题。
                    <sup>	定义上标文本。
                    <table>	定义表格。
                    <tbody>	定义表格中的主体内容。
                    <td>	定义表格中的单元。
                    <textarea>	定义多行的文本输入控件。
                    <tfoot>	定义表格中的表注内容（脚注）。
                    <th>	定义表格中的表头单元格。
                    <thead>	定义表格中的表头内容。
                    <time>	定义日期/时间。
                    <title>	定义文档的标题。
                    <tr>	定义表格中的行。
                    <track>	定义用在媒体播放器中的文本轨道。
                    <tt>	定义打字机文本。
                    <u>	不赞成使用。定义下划线文本。
                    <ul>	定义无序列表。
                    <var>	定义文本的变量部分。
                    <video>	定义视频。
                    <wbr>	定义可能的换行符。
                    <xmp>	不赞成使用。定义预格式文本。
                    '''
